import numpy as np


configfile: "config.yaml"


rule preprocess_network:
    input: config["network"]
    output: "networks/prenetwork_Co2L{Co2factor}_sn{n_snapshots}.nc"
    script: "scripts/preprocess_network.py"


rule solve_full_contingency:
    input: "networks/prenetwork_Co2L{Co2factor}_sn{n_snapshots}.nc"
    output: "results/postnetwork_Co2L{Co2factor}_sn{n_snapshots}_tatl{tatlfactor}.nc"
    threads: 4
    resources: mem= 5000#50000
    script: "scripts/full_contingency_tatl_test.py"


rule solve_netzbooster:
    input: "results/postnetwork_Co2L{Co2factor}_sn{n_snapshots}_tatl{tatlfactor}.nc"
    output:
        P = "results/P_netzbooster_Co2L{Co2factor}_sn{n_snapshots}_tatl{tatlfactor}.csv",
        pos = "results/p_pos_Co2L{Co2factor}_sn{n_snapshots}_tatl{tatlfactor}.csv",
        neg = "results/p_neg_Co2L{Co2factor}_sn{n_snapshots}_tatl{tatlfactor}.csv"
    threads: 4
    resources: mem= 50000 #50000
    script: "scripts/netzbooster_seq.py"


def tatl_pus():
    cf = config["tatl_factor"]
    return np.round(np.arange(cf["start"], cf["stop"] + cf["step"], cf["step"]),2)


rule all:
    input:
      booster=expand("results/P_netzbooster_Co2L0.1_sn2_tatl{tatlfactor}.csv", tatlfactor=tatl_pus()),
      booster_pos=expand("results/p_pos_Co2L0.1_sn2_tatl{tatlfactor}.csv", tatlfactor=tatl_pus()),
      booster_neg=expand("results/p_neg_Co2L0.1_sn2_tatl{tatlfactor}.csv", tatlfactor=tatl_pus()),
      full=expand("results/postnetwork_Co2L0.1_sn2_tatl{tatlfactor}.nc", tatlfactor=tatl_pus())
